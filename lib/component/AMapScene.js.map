{"version":3,"sources":["../../src/component/AMapScene.tsx"],"names":["AMapScene","React","memo","props","style","className","map","option","onSceneLoaded","container","scene","setScene","sceneInstance","Scene","id","current","GaodeMap","on","destroy","setMapStyle","ref","children"],"mappings":";;;;;;;;;;;;;;;AAAA;;AAGA;;AACA;;AACA;;;;;;;;;AASA,IAAMA,SAAS,GAAGC,eAAMC,IAAN,CAAW,UAACC,KAAD,EAA2B;AAAA,MAC9CC,KAD8C,GACGD,KADH,CAC9CC,KAD8C;AAAA,MACvCC,SADuC,GACGF,KADH,CACvCE,SADuC;AAAA,MAC5BC,GAD4B,GACGH,KADH,CAC5BG,GAD4B;AAAA,MACvBC,MADuB,GACGJ,KADH,CACvBI,MADuB;AAAA,MACfC,aADe,GACGL,KADH,CACfK,aADe;AAEtD,MAAMC,SAAS,GAAG,uBAAlB;;AAFsD,kBAG5B,sBAH4B;AAAA;AAAA,MAG/CC,KAH+C;AAAA,MAGxCC,QAHwC;;AAItD,wBAAU,YAAM;AACd,QAAMC,aAAa,GAAG,IAAIC,QAAJ;AACpBC,MAAAA,EAAE,EAAEL,SAAS,CAACM;AADM,OAEjBR,MAFiB;AAGpBD,MAAAA,GAAG,EAAE,IAAIU,gBAAJ,CAAaV,GAAb;AAHe,OAAtB;AAKAM,IAAAA,aAAa,CAACK,EAAd,CAAiB,QAAjB,EAA2B,YAAM;AAC/BN,MAAAA,QAAQ,CAACC,aAAD,CAAR;;AACA,UAAIJ,aAAJ,EAAmB;AACjBA,QAAAA,aAAa,CAACI,aAAD,CAAb;AACD;AACF,KALD;AAMA,WAAO,YAAM;AACXA,MAAAA,aAAa,CAACM,OAAd;AACD,KAFD;AAGD,GAfD,EAeG,EAfH;AAgBA,wBAAU,YAAM;AACd,QAAI,CAACR,KAAL,EAAY;AACV;AACD;;AACDA,IAAAA,KAAK,CAACS,WAAN,CAAkBb,GAAG,CAACF,KAAtB;AACD,GALD,EAKG,CAACE,GAAG,CAACF,KAAL,CALH;AAOA,SACE,6BAAC,0BAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEM,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,0BACC,KADD,EAEC;AACEU,IAAAA,GAAG,EAAEX,SADP;AAEEL,IAAAA,KAAK,EAALA,KAFF;AAGEC,IAAAA,SAAS,EAATA;AAHF,GAFD,EAOCK,KAAK,IAAIP,KAAK,CAACkB,QAPhB,CADH,CADF;AAaD,CAxCiB,CAAlB;;eA0CerB,S","sourcesContent":["import { IMapConfig, ISceneConfig, Scene } from '@antv/l7';\n// @ts-ignore\n// tslint:disable-next-line:no-submodule-imports\nimport { GaodeMap } from '@antv/l7-maps';\nimport React, { createElement, createRef, useEffect, useState } from 'react';\nimport { SceneContext } from './SceneContext';\ninterface IMapSceneConig {\n  style?: React.CSSProperties;\n  className?: string;\n  map: Partial<IMapConfig>;\n  option?: Partial<ISceneConfig>;\n  children?: React.ReactNode;\n  onSceneLoaded?: (scene: Scene) => void;\n}\nconst AMapScene = React.memo((props: IMapSceneConig) => {\n  const { style, className, map, option, onSceneLoaded } = props;\n  const container = createRef();\n  const [scene, setScene] = useState<Scene>();\n  useEffect(() => {\n    const sceneInstance = new Scene({\n      id: container.current as HTMLDivElement,\n      ...option,\n      map: new GaodeMap(map),\n    });\n    sceneInstance.on('loaded', () => {\n      setScene(sceneInstance);\n      if (onSceneLoaded) {\n        onSceneLoaded(sceneInstance);\n      }\n    });\n    return () => {\n      sceneInstance.destroy();\n    };\n  }, []);\n  useEffect(() => {\n    if (!scene) {\n      return;\n    }\n    scene.setMapStyle(map.style);\n  }, [map.style]);\n\n  return (\n    <SceneContext.Provider value={scene}>\n      {createElement(\n        'div',\n        {\n          ref: container,\n          style,\n          className,\n        },\n        scene && props.children,\n      )}\n    </SceneContext.Provider>\n  );\n});\n\nexport default AMapScene;\n"],"file":"AMapScene.js"}
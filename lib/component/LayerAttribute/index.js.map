{"version":3,"sources":["../../../src/component/LayerAttribute/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA","sourcesContent":["import {\n  BlendType,\n  IActiveOption,\n  IAnimateOption,\n  ILayer,\n  IScale,\n  IScaleOptions,\n  ISourceCFG,\n  Scene,\n} from '@antv/l7';\nimport * as React from 'react';\nimport Active from './Active';\nimport Animate from './Animate';\nimport Color from './Color';\nimport Filter from './Filter';\nimport Scale from './Scale';\nimport Select from './Select';\nimport Shape from './Shape';\nimport Size from './Size';\nimport Source from './Source';\nimport Style from './Style';\n\ntype CallBack = (...args: any[]) => any;\n\nexport interface IAttributeOptions {\n  field: string;\n  value: string | number;\n  values: string[] | number[] | string | number | CallBack;\n  scale?: string;\n  blend: keyof typeof BlendType;\n  options?: {\n    [key: string]: any;\n  };\n}\n\nexport interface IScaleAttributeOptions {\n  field: string | IScaleOptions;\n  value: IScale;\n  values: IScaleOptions | IScale;\n}\nexport interface ILayerOption {\n  name?: string;\n  visible: boolean;\n  zIndex: number;\n  minZoom: number;\n  maxZoom: number;\n  autoFit: boolean;\n  blend: keyof typeof BlendType;\n  [key: string]: any;\n}\nexport interface IScaleOption {\n  [key: string]: IScaleAttributeOptions;\n}\nexport interface IStyleOptions {\n  opacity: number;\n  [key: string]: any;\n}\n\nexport interface ISourceOptions extends ISourceCFG {\n  data: any;\n  // 每次更新数据之后是否自适应缩放\n  autoFit?: boolean;\n  // Mapbox 自适应的参数\n  fitBoundsOptions?: any;\n}\n\nexport interface IActiveOptions {\n  option: IActiveOption | boolean;\n}\nexport interface ILayerProps {\n  options?: Partial<ILayerOption>;\n  source: ISourceOptions;\n  color: Partial<IAttributeOptions>;\n  shape: Partial<IAttributeOptions>;\n  scale?: Partial<IScaleAttributeOptions>;\n  size?: Partial<IAttributeOptions>;\n  style?: Partial<IStyleOptions>;\n  active?: IActiveOptions;\n  select?: IActiveOptions;\n  filter?: Partial<IAttributeOptions>;\n  animate?: Partial<IAnimateOption>;\n  onLayerLoaded?: (layer: ILayer, scene: Scene) => void;\n  children?: React.ReactNode;\n}\n\nexport {\n  Active,\n  Color,\n  Filter,\n  Source,\n  Size,\n  Shape,\n  Style,\n  Scale,\n  Select,\n  Animate,\n};\n"],"file":"index.js"}
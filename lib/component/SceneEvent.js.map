{"version":3,"sources":["../../src/component/SceneEvent.tsx"],"names":["useEffect","React","SceneEvent","memo","props","type","handler","mapScene","on","off"],"mappings":";;;;;;;;;AACA;;AACA;;IAEQA,S,GAAcC,K,CAAdD,S;AAKR,IAAME,UAAU,GAAGD,KAAK,CAACE,IAAN,CAAW,UAACC,KAAD,EAAwB;AAAA,MAC5CC,IAD4C,GAC1BD,KAD0B,CAC5CC,IAD4C;AAAA,MACtCC,OADsC,GAC1BF,KAD0B,CACtCE,OADsC;AAEpD,MAAMC,QAAQ,GAAI,kCAAlB;AAEAP,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,QAAQ,CAACC,EAAT,CAAYH,IAAZ,EAAkBC,OAAlB;AACA,WAAO,YAAM;AACXC,MAAAA,QAAQ,CAACE,GAAT,CAAaJ,IAAb,EAAmBC,OAAnB;AACD,KAFD;AAGD,GALQ,EAKN,CAACD,IAAD,CALM,CAAT;AAMA,SAAO,IAAP;AACD,CAXkB,CAAnB;eAaeH,U","sourcesContent":["import { ILayer, Scene } from '@antv/l7';\nimport * as React from 'react';\nimport { useSceneValue } from './SceneContext';\n\nconst { useEffect } = React;\ninterface ILayerProps {\n  type: string;\n  handler: (...args: any[]) => void;\n}\nconst SceneEvent = React.memo((props: ILayerProps) => {\n  const { type, handler } = props;\n  const mapScene = (useSceneValue() as unknown) as Scene;\n\n  useEffect(() => {\n    mapScene.on(type, handler);\n    return () => {\n      mapScene.off(type, handler);\n    };\n  }, [type]);\n  return null;\n});\n\nexport default SceneEvent;\n"],"file":"SceneEvent.js"}
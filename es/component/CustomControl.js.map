{"version":3,"sources":["../../src/component/CustomControl.tsx"],"names":["Control","React","createPortal","useSceneValue","useEffect","useState","CustoonConrol","props","className","style","children","position","mapScene","el","document","createElement","custom","onAdd","cssText","Object","keys","map","key","join","addControl","removeControl"],"mappings":"AAAA,SAASA,OAAT,QAA6C,UAA7C;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,aAAT,QAA8B,gBAA9B;IACQC,S,GAAwBH,K,CAAxBG,S;IAAWC,Q,GAAaJ,K,CAAbI,Q;AASnB,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAAiD;AAAA,MACtDC,SADsD,GACbD,KADa,CACtDC,SADsD;AAAA,MAC3CC,KAD2C,GACbF,KADa,CAC3CE,KAD2C;AAAA,MACpCC,QADoC,GACbH,KADa,CACpCG,QADoC;AAAA,MAC1BC,QAD0B,GACbJ,KADa,CAC1BI,QAD0B;AAE9D,MAAMC,QAAQ,GAAIT,aAAa,EAA/B;AACA,MAAMU,EAAE,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAX;AACAX,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMY,MAAM,GAAG,IAAIhB,OAAJ,CAAY;AACzBW,MAAAA,QAAQ,EAARA;AADyB,KAAZ,CAAf;;AAGAK,IAAAA,MAAM,CAACC,KAAP,GAAe,YAAM;AACnB,UAAIT,SAAJ,EAAe;AACbK,QAAAA,EAAE,CAACL,SAAH,GAAeA,SAAf;AACD;;AACD,UAAIC,KAAJ,EAAW;AACT,YAAMS,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYX,KAAZ,EACbY,GADa,CACT,UAACC,GAAD,EAAiB;AAEpB,2BAAUA,GAAV,cAAiBb,KAAK,CAACa,GAAD,CAAtB;AACD,SAJa,EAKbC,IALa,CAKR,GALQ,CAAhB;AAMAV,QAAAA,EAAE,CAACJ,KAAH,CAASS,OAAT,GAAmBA,OAAnB;AACD;;AAED,aAAOL,EAAP;AACD,KAfD;;AAgBAD,IAAAA,QAAQ,CAACY,UAAT,CAAoBR,MAApB;AACA,WAAO,YAAM;AACXJ,MAAAA,QAAQ,CAACa,aAAT,CAAuBT,MAAvB;AACD,KAFD;AAGD,GAxBQ,EAwBN,EAxBM,CAAT;AAyBA,SAAOd,YAAY,CAACQ,QAAD,EAAWG,EAAX,CAAnB;AACD","sourcesContent":["import { Control, PositionName, Scene } from '@antv/l7';\nimport * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport { useSceneValue } from './SceneContext';\nconst { useEffect, useState } = React;\n\ninterface IColorLegendProps {\n  position: PositionName;\n  className?: string;\n  style?: React.CSSProperties;\n  children?: JSX.Element | JSX.Element[] | Array<JSX.Element | undefined>;\n}\n\nexport default function CustoonConrol(props: IColorLegendProps) {\n  const { className, style, children, position } = props;\n  const mapScene = (useSceneValue() as unknown) as Scene;\n  const el = document.createElement('div');\n  useEffect(() => {\n    const custom = new Control({\n      position,\n    });\n    custom.onAdd = () => {\n      if (className) {\n        el.className = className;\n      }\n      if (style) {\n        const cssText = Object.keys(style)\n          .map((key: string) => {\n            // @ts-ignore\n            return `${key}:${style[key]}`;\n          })\n          .join(';');\n        el.style.cssText = cssText;\n      }\n\n      return el;\n    };\n    mapScene.addControl(custom);\n    return () => {\n      mapScene.removeControl(custom);\n    };\n  }, []);\n  return createPortal(children, el);\n}\n"],"file":"CustomControl.js"}